.well.well-default
  = simple_form_for :q, default_search_form_options do |f|
    = f.input :state_eq, collection: model_states('course/review'), label_method: :human_name, value_method: :name,
      include_blank: t('.select_state')

    = f.button :submit

- if @reviews.empty?
  = t('has_no_reviews')
- else
  %table#reviews.table
    %thead
      %tr
        %th= han('course/review', :state)
        %th= han('course/review', :course)
        %th= han('course/review', :creator)
        %th= han('course/review', :body)
        %th= han('course/review', :date)
        %th
    %tbody
      - @reviews.each do |review|
        %tr.review{class: review.on_moderate? ? "active" : ''}
          %td
            .btn-group.event-switcher
              .button.btn.btn-default.btn-sm.dropdown-toggle{"data-toggle" => "dropdown", :type => "button"}
                = review.human_state_name
                %span.caret
              %ul.dropdown-menu
                - review.state_events.each do |event|
                  - if event
                    %li= link_to hen('course/review', event), fire_event_api_company_course_review_path(review.course, review, event: event, format: :json),
                      method: :patch, class: "switch-state",
                      remote: true
          %td= review.course
          %td= review.creator
          %td= truncate review.body, length: 300
          %td= l review.created_at, format: :short
          %td
            .btn-toolbar.pull-right{role: 'toolbar'}
              .btn-group.btn-group-xs
                = link_to edit_company_admin_review_path(review), class: "btn btn-default" do
                  %span.glyphicon.glyphicon-pencil

/ = paginate @reviews
